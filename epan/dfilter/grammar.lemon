
%include {
#include "config.h"

#include <assert.h>

#include "dfilter-int.h"
#include "syntax-tree.h"
#include "sttype-range.h"
#include "sttype-test.h"
#include "sttype-function.h"
#include "sttype-set.h"
#include "drange.h"

#include "grammar.h"

#ifdef _WIN32
#pragma warning(disable:4671)
#endif

static stnode_t *
new_function(dfwork_t *dfw, df_lval_t *lval);

/* End of C code */
}

/* Parser Information */
%name		Dfilter
%token_prefix	TOKEN_
%extra_argument	{dfwork_t *dfw}

/* Terminal and Non-Terminal types and destructors */
%token_type			{df_lval_t*}
%token_destructor		{
	(void)dfw;
	df_lval_free($$);
}

%type		sentence	{stnode_t*}


%type		expr		{stnode_t*}
%destructor	expr		{stnode_free($$);}

%type		entity		{stnode_t*}
%destructor	entity		{stnode_free($$);}

%type		function	{stnode_t*}
%destructor	function	{stnode_free($$);}

%type		relation_test	{stnode_t*}
%destructor	relation_test	{stnode_free($$);}

%type		comparison_test	{stnode_t*}
%destructor	comparison_test	{stnode_free($$);}

%type		logical_test	{stnode_t*}
%destructor	logical_test	{stnode_free($$);}

%type		rel_binop	{test_op_t}

%type		cmp_op		{test_op_t}

%type		range		{stnode_t*}
%destructor	range		{stnode_free($$);}

%type		range_node	{drange_node*}
%destructor	range_node	{drange_node_free($$);}

%type		range_node_list	{GSList*}
%destructor	range_node_list	{drange_node_free_list($$);}

%type		function_params	{GSList*}
%destructor	function_params	{st_funcparams_free($$);}

%type		set		{stnode_t*}
%destructor	set		{stnode_free($$);}

%type		set_list	{GSList*}
%destructor	set_list	{set_nodelist_free($$);}

%type		set_element	{GSList*}
%destructor	set_element	{set_nodelist_free($$);}

/* This is called as soon as a syntax error happens. After that, 
any "error" symbols are shifted, if possible. */
%syntax_error {
	dfilter_fail_parse(dfw, "\"%s\" was unexpected in this context.",
				df_lval_value(TOKEN));
}

/* When a parse fails, mark an error. This occurs after
the above syntax_error code and after the parser fails to
use error recovery, shifting an "error" symbol and successfully
shifting 3 more symbols. */
%parse_failure {
	dfw->syntax_error = TRUE;
}

/* ----------------- The grammar -------------- */

/* Associativity */
%left TEST_AND.
%left TEST_OR.
%nonassoc TEST_EQ TEST_NE TEST_LT TEST_LE TEST_GT TEST_GE TEST_CONTAINS TEST_MATCHES TEST_BITWISE_AND.
%right TEST_NOT.

/* Top-level targets */
sentence ::= expr(X).		{ dfw->st_root = X; }
sentence ::= .			{ dfw->st_root = NULL; }

expr(X) ::= relation_test(R).	{ X = R; }
expr(X) ::= logical_test(L).	{ X = L; }


/* Logical tests */
logical_test(T) ::= expr(E) TEST_AND expr(F).
{
	T = stnode_new_test(TEST_OP_AND, E, F);
}

logical_test(T) ::= expr(E) TEST_OR expr(F).
{
	T = stnode_new_test(TEST_OP_OR, E, F);
}

logical_test(T) ::= TEST_NOT expr(E).
{
	T = stnode_new_test(TEST_OP_NOT, E, NULL);
}

logical_test(T) ::= entity(E).
{
	T = stnode_new_test(TEST_OP_EXISTS, E, NULL);
}



/* Entities, or things that can be compared/tested/checked */
entity(E) ::= STRING(S).
{
	E = stnode_new_string(df_lval_value(S));
	df_lval_free(S);
}
entity(E) ::= CHARCONST(C).
{
	/* A charconst uses "unparsed" semantic rules. */
	E = stnode_new_unparsed(df_lval_value(C));
	df_lval_free(C);
}
entity(E) ::= UNPARSED(U).
{
	E = stnode_new_unparsed(df_lval_value(U));
	dfilter_resolve_unparsed(dfw, E);
	df_lval_free(U);
}
entity(E) ::= range(R).		{ E = R; }
entity(E) ::= function(F).	{ E = F; }


/* Ranges */
range(R) ::= entity(E) LBRACKET range_node_list(L) RBRACKET.
{
	R = stnode_new(STTYPE_RANGE, NULL);
	sttype_range_set(R, E, L);

	/* Delete the list, but not the drange_nodes that
	 * the list contains. */
	g_slist_free(L);
}

range_node_list(L) ::= range_node(D).
{
	L = g_slist_append(NULL, D);
}

range_node_list(L) ::= range_node_list(P) COMMA range_node(D).
{
	L = g_slist_append(P, D);
}

range_node(D) ::= RANGE(R).
{
	char *err = NULL;

	D = drange_node_from_str(df_lval_value(R), &err);
	if (err != NULL) {
		dfilter_fail_parse(dfw, "%s", err);
		g_free(err);
	}

	df_lval_free(R);
}


/* Relational tests */
cmp_op(O) ::= TEST_ANY_EQ.	{ O = TEST_OP_ANY_EQ; }
cmp_op(O) ::= TEST_ALL_NE.	{ O = TEST_OP_ALL_NE; }
cmp_op(O) ::= TEST_ANY_NE.	{ O = TEST_OP_ANY_NE; }
cmp_op(O) ::= TEST_GT.		{ O = TEST_OP_GT; }
cmp_op(O) ::= TEST_GE.		{ O = TEST_OP_GE; }
cmp_op(O) ::= TEST_LT.		{ O = TEST_OP_LT; }
cmp_op(O) ::= TEST_LE.		{ O = TEST_OP_LE; }
cmp_op(O) ::= TEST_BITWISE_AND. { O = TEST_OP_BITWISE_AND; }

comparison_test(T) ::= entity(E) cmp_op(O) entity(F).
{
	T = stnode_new_test(O, E, F);
}

/* 'a == b == c' or 'a < b <= c <= d < e' */
comparison_test(T) ::= entity(E) cmp_op(O) comparison_test(R).
{
	stnode_t *L, *F;
	/* for now generate it like E O F  TEST_OP_AND  F P G, later it could be optimized
	   or semantically checked (to make a <= b >= c or a == b != c invalid)?
	 */

	F = R;
	do {
		ws_assert(F != NULL && stnode_type_id(F) == STTYPE_TEST);
		sttype_test_get(F, NULL, &F, NULL);
	} while (stnode_type_id(F) == STTYPE_TEST);

	L = stnode_new_test(O, E, stnode_dup(F));

	T = stnode_new_test(TEST_OP_AND, L, R);
}

relation_test(T) ::= comparison_test(C).	{ T = C; }

/* Does not chain like math comparisons. */
rel_binop(O) ::= TEST_CONTAINS.		{ O = TEST_OP_CONTAINS; }
rel_binop(O) ::= TEST_MATCHES.		{ O = TEST_OP_MATCHES; }

relation_test(T) ::= entity(E) rel_binop(O) entity(F).
{
	T = stnode_new_test(O, E, F);
}

relation_test(T) ::= entity(E) TEST_IN set(S).
{
	T = stnode_new_test(TEST_OP_IN, E, S);
}

relation_test(T) ::= entity(E) TEST_NOT TEST_IN set(S).
{
	stnode_t *R = stnode_new_test(TEST_OP_IN, E, S);

	T = stnode_new_test(TEST_OP_NOT, R, NULL);
}

set(S) ::= LBRACE set_list(L) RBRACE.
{
	S = stnode_new(STTYPE_SET, L);
}

set_list(L) ::= set_element(N).
{
	L = g_slist_concat(NULL, N);
}

set_list(L) ::= set_list(P) COMMA set_element(N).
{
	L = g_slist_concat(P, N);
}

set_element(N) ::= entity(X).
{
	N = g_slist_append(NULL, X);
	N = g_slist_append(N, NULL);
}

set_element(N) ::= entity(X) DOTDOT entity(Y).
{
	N = g_slist_append(NULL, X);
	N = g_slist_append(N, Y);
}

/* Functions */

%code {
	static stnode_t *
	new_function(dfwork_t *dfw, df_lval_t *lval)
	{
		const char *name = df_lval_value(lval);
		df_func_def_t *def = df_func_lookup(name);
		if (!def) {
			dfilter_fail_parse(dfw, "Function '%s' does not exist", name);
		}
		return stnode_new(STTYPE_FUNCTION, def);
	}
}

/* A function can have one or more parameters */
function(F) ::= UNPARSED(U) LPAREN function_params(P) RPAREN.
{
	F = new_function(dfw, U);
	sttype_function_set_params(F, P);
	df_lval_free(U);
}

/* A function can have zero parameters. */
function(F) ::= UNPARSED(U) LPAREN RPAREN.
{
	F = new_function(dfw, U);
	df_lval_free(U);
}

function_params(P) ::= entity(E).
{
	P = g_slist_append(NULL, E);
}

function_params(P) ::= function_params(L) COMMA entity(E).
{
	P = g_slist_append(L, E);
}


/* Any expression inside parens is simply that expression */
expr(X) ::= LPAREN expr(Y) RPAREN.
{
	X = Y;
	stnode_set_inside_parens(X, TRUE);
}

